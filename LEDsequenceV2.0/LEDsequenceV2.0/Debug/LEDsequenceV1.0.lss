
LEDsequenceV1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c08  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000c7c  2**0
                  ALLOC
  2 .stab         00001920  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001427  00000000  00000000  0000259c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_1>
   8:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5d 05 	call	0xaba	; 0xaba <main>
  74:	0c 94 02 06 	jmp	0xc04	; 0xc04 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <INT_init>:
 * 3-set external interrupt trigger signal type
 * 4-enable global interrupt
 */

EN_INT_error INT_init(ST_INT_Config* Int_config)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	2b 97       	sbiw	r28, 0x0b	; 11
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	9a 83       	std	Y+2, r25	; 0x02
  92:	89 83       	std	Y+1, r24	; 0x01
	SREG  &= ~(1<<7);				// Disable interrupts by clearing I-bit
  94:	af e5       	ldi	r26, 0x5F	; 95
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	ef e5       	ldi	r30, 0x5F	; 95
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	8c 93       	st	X, r24
	if( Int_config->source ==EN_INT0 || Int_config->source ==EN_INT1 || Int_config->source ==EN_INT2
  a2:	e9 81       	ldd	r30, Y+1	; 0x01
  a4:	fa 81       	ldd	r31, Y+2	; 0x02
  a6:	80 81       	ld	r24, Z
  a8:	88 23       	and	r24, r24
  aa:	f9 f0       	breq	.+62     	; 0xea <INT_init+0x6e>
  ac:	e9 81       	ldd	r30, Y+1	; 0x01
  ae:	fa 81       	ldd	r31, Y+2	; 0x02
  b0:	80 81       	ld	r24, Z
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	d1 f0       	breq	.+52     	; 0xea <INT_init+0x6e>
  b6:	e9 81       	ldd	r30, Y+1	; 0x01
  b8:	fa 81       	ldd	r31, Y+2	; 0x02
  ba:	80 81       	ld	r24, Z
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	a9 f0       	breq	.+42     	; 0xea <INT_init+0x6e>
  c0:	e9 81       	ldd	r30, Y+1	; 0x01
  c2:	fa 81       	ldd	r31, Y+2	; 0x02
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	88 23       	and	r24, r24
  c8:	81 f0       	breq	.+32     	; 0xea <INT_init+0x6e>
  ca:	e9 81       	ldd	r30, Y+1	; 0x01
  cc:	fa 81       	ldd	r31, Y+2	; 0x02
  ce:	81 81       	ldd	r24, Z+1	; 0x01
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	59 f0       	breq	.+22     	; 0xea <INT_init+0x6e>
  d4:	e9 81       	ldd	r30, Y+1	; 0x01
  d6:	fa 81       	ldd	r31, Y+2	; 0x02
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	31 f0       	breq	.+12     	; 0xea <INT_init+0x6e>
  de:	e9 81       	ldd	r30, Y+1	; 0x01
  e0:	fa 81       	ldd	r31, Y+2	; 0x02
  e2:	81 81       	ldd	r24, Z+1	; 0x01
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	09 f0       	breq	.+2      	; 0xea <INT_init+0x6e>
  e8:	27 c1       	rjmp	.+590    	; 0x338 <INT_init+0x2bc>
			||Int_config->trigger ==LOW_LEVEL || Int_config->trigger ==ANY_CHANGE ||
			Int_config->trigger ==FALLING || Int_config->trigger ==RISING )
	{
		switch (Int_config->source)
  ea:	e9 81       	ldd	r30, Y+1	; 0x01
  ec:	fa 81       	ldd	r31, Y+2	; 0x02
  ee:	80 81       	ld	r24, Z
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	3b 87       	std	Y+11, r19	; 0x0b
  f6:	2a 87       	std	Y+10, r18	; 0x0a
  f8:	8a 85       	ldd	r24, Y+10	; 0x0a
  fa:	9b 85       	ldd	r25, Y+11	; 0x0b
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	09 f4       	brne	.+2      	; 0x104 <INT_init+0x88>
 102:	76 c0       	rjmp	.+236    	; 0x1f0 <INT_init+0x174>
 104:	2a 85       	ldd	r18, Y+10	; 0x0a
 106:	3b 85       	ldd	r19, Y+11	; 0x0b
 108:	22 30       	cpi	r18, 0x02	; 2
 10a:	31 05       	cpc	r19, r1
 10c:	09 f4       	brne	.+2      	; 0x110 <INT_init+0x94>
 10e:	db c0       	rjmp	.+438    	; 0x2c6 <INT_init+0x24a>
 110:	8a 85       	ldd	r24, Y+10	; 0x0a
 112:	9b 85       	ldd	r25, Y+11	; 0x0b
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	09 f0       	breq	.+2      	; 0x11a <INT_init+0x9e>
 118:	05 c1       	rjmp	.+522    	; 0x324 <INT_init+0x2a8>
		{
		case EN_INT0:
		{
			CLEAR_BIT(DDRD,INT0_pin);	// Configure INT0/PD2/pin16 as input pin
 11a:	a1 e3       	ldi	r26, 0x31	; 49
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e1 e3       	ldi	r30, 0x31	; 49
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	8c 93       	st	X, r24
			SET_BIT(GICR,INT0);			// Enable external interrupt pin INT0
 128:	ab e5       	ldi	r26, 0x5B	; 91
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	eb e5       	ldi	r30, 0x5B	; 91
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8c 93       	st	X, r24
			switch (Int_config->trigger)
 136:	e9 81       	ldd	r30, Y+1	; 0x01
 138:	fa 81       	ldd	r31, Y+2	; 0x02
 13a:	81 81       	ldd	r24, Z+1	; 0x01
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	39 87       	std	Y+9, r19	; 0x09
 142:	28 87       	std	Y+8, r18	; 0x08
 144:	88 85       	ldd	r24, Y+8	; 0x08
 146:	99 85       	ldd	r25, Y+9	; 0x09
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	91 05       	cpc	r25, r1
 14c:	21 f1       	breq	.+72     	; 0x196 <INT_init+0x11a>
 14e:	28 85       	ldd	r18, Y+8	; 0x08
 150:	39 85       	ldd	r19, Y+9	; 0x09
 152:	22 30       	cpi	r18, 0x02	; 2
 154:	31 05       	cpc	r19, r1
 156:	2c f4       	brge	.+10     	; 0x162 <INT_init+0xe6>
 158:	88 85       	ldd	r24, Y+8	; 0x08
 15a:	99 85       	ldd	r25, Y+9	; 0x09
 15c:	00 97       	sbiw	r24, 0x00	; 0
 15e:	61 f0       	breq	.+24     	; 0x178 <INT_init+0xfc>
 160:	e1 c0       	rjmp	.+450    	; 0x324 <INT_init+0x2a8>
 162:	28 85       	ldd	r18, Y+8	; 0x08
 164:	39 85       	ldd	r19, Y+9	; 0x09
 166:	22 30       	cpi	r18, 0x02	; 2
 168:	31 05       	cpc	r19, r1
 16a:	21 f1       	breq	.+72     	; 0x1b4 <INT_init+0x138>
 16c:	88 85       	ldd	r24, Y+8	; 0x08
 16e:	99 85       	ldd	r25, Y+9	; 0x09
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	91 05       	cpc	r25, r1
 174:	71 f1       	breq	.+92     	; 0x1d2 <INT_init+0x156>
 176:	d6 c0       	rjmp	.+428    	; 0x324 <INT_init+0x2a8>
			{
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC00);
 178:	a5 e5       	ldi	r26, 0x55	; 85
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e5 e5       	ldi	r30, 0x55	; 85
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC01);
 186:	a5 e5       	ldi	r26, 0x55	; 85
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e5 e5       	ldi	r30, 0x55	; 85
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	8c 93       	st	X, r24
 194:	c7 c0       	rjmp	.+398    	; 0x324 <INT_init+0x2a8>
				break;
			case ANY_CHANGE:
				SET_BIT(MCUCR,ISC00);
 196:	a5 e5       	ldi	r26, 0x55	; 85
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e5 e5       	ldi	r30, 0x55	; 85
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC01);
 1a4:	a5 e5       	ldi	r26, 0x55	; 85
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e5 e5       	ldi	r30, 0x55	; 85
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	8c 93       	st	X, r24
 1b2:	b8 c0       	rjmp	.+368    	; 0x324 <INT_init+0x2a8>
				break;
			case FALLING:
				CLEAR_BIT(MCUCR,ISC00);
 1b4:	a5 e5       	ldi	r26, 0x55	; 85
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e5 e5       	ldi	r30, 0x55	; 85
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
 1c2:	a5 e5       	ldi	r26, 0x55	; 85
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e5 e5       	ldi	r30, 0x55	; 85
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	8c 93       	st	X, r24
 1d0:	a9 c0       	rjmp	.+338    	; 0x324 <INT_init+0x2a8>
				break;
			case RISING:
				SET_BIT(MCUCR,ISC00);
 1d2:	a5 e5       	ldi	r26, 0x55	; 85
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e5 e5       	ldi	r30, 0x55	; 85
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC01);
 1e0:	a5 e5       	ldi	r26, 0x55	; 85
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e5 e5       	ldi	r30, 0x55	; 85
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	8c 93       	st	X, r24
 1ee:	9a c0       	rjmp	.+308    	; 0x324 <INT_init+0x2a8>
			}
		}
		break;
		case EN_INT1:
		{
			CLEAR_BIT(DDRD,INT1_pin);	// Configure INT1/PD3/pin17 as input pin
 1f0:	a1 e3       	ldi	r26, 0x31	; 49
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e1 e3       	ldi	r30, 0x31	; 49
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	8c 93       	st	X, r24
			SET_BIT(GICR,INT1);			// Enable external interrupt pin INT1
 1fe:	ab e5       	ldi	r26, 0x5B	; 91
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	eb e5       	ldi	r30, 0x5B	; 91
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	8c 93       	st	X, r24
			switch (Int_config->trigger)
 20c:	e9 81       	ldd	r30, Y+1	; 0x01
 20e:	fa 81       	ldd	r31, Y+2	; 0x02
 210:	81 81       	ldd	r24, Z+1	; 0x01
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	3f 83       	std	Y+7, r19	; 0x07
 218:	2e 83       	std	Y+6, r18	; 0x06
 21a:	8e 81       	ldd	r24, Y+6	; 0x06
 21c:	9f 81       	ldd	r25, Y+7	; 0x07
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	91 05       	cpc	r25, r1
 222:	21 f1       	breq	.+72     	; 0x26c <INT_init+0x1f0>
 224:	2e 81       	ldd	r18, Y+6	; 0x06
 226:	3f 81       	ldd	r19, Y+7	; 0x07
 228:	22 30       	cpi	r18, 0x02	; 2
 22a:	31 05       	cpc	r19, r1
 22c:	2c f4       	brge	.+10     	; 0x238 <INT_init+0x1bc>
 22e:	8e 81       	ldd	r24, Y+6	; 0x06
 230:	9f 81       	ldd	r25, Y+7	; 0x07
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	61 f0       	breq	.+24     	; 0x24e <INT_init+0x1d2>
 236:	76 c0       	rjmp	.+236    	; 0x324 <INT_init+0x2a8>
 238:	2e 81       	ldd	r18, Y+6	; 0x06
 23a:	3f 81       	ldd	r19, Y+7	; 0x07
 23c:	22 30       	cpi	r18, 0x02	; 2
 23e:	31 05       	cpc	r19, r1
 240:	21 f1       	breq	.+72     	; 0x28a <INT_init+0x20e>
 242:	8e 81       	ldd	r24, Y+6	; 0x06
 244:	9f 81       	ldd	r25, Y+7	; 0x07
 246:	83 30       	cpi	r24, 0x03	; 3
 248:	91 05       	cpc	r25, r1
 24a:	71 f1       	breq	.+92     	; 0x2a8 <INT_init+0x22c>
 24c:	6b c0       	rjmp	.+214    	; 0x324 <INT_init+0x2a8>
			{
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC10);
 24e:	a5 e5       	ldi	r26, 0x55	; 85
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	e5 e5       	ldi	r30, 0x55	; 85
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	8b 7f       	andi	r24, 0xFB	; 251
 25a:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
 25c:	a5 e5       	ldi	r26, 0x55	; 85
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e5 e5       	ldi	r30, 0x55	; 85
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	87 7f       	andi	r24, 0xF7	; 247
 268:	8c 93       	st	X, r24
 26a:	5c c0       	rjmp	.+184    	; 0x324 <INT_init+0x2a8>
				break;
			case ANY_CHANGE:
				SET_BIT(MCUCR,ISC10);
 26c:	a5 e5       	ldi	r26, 0x55	; 85
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e5 e5       	ldi	r30, 0x55	; 85
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	84 60       	ori	r24, 0x04	; 4
 278:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC11);
 27a:	a5 e5       	ldi	r26, 0x55	; 85
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e5 e5       	ldi	r30, 0x55	; 85
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	87 7f       	andi	r24, 0xF7	; 247
 286:	8c 93       	st	X, r24
 288:	4d c0       	rjmp	.+154    	; 0x324 <INT_init+0x2a8>
				break;
			case FALLING:
				CLEAR_BIT(MCUCR,ISC10);
 28a:	a5 e5       	ldi	r26, 0x55	; 85
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	e5 e5       	ldi	r30, 0x55	; 85
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8b 7f       	andi	r24, 0xFB	; 251
 296:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
 298:	a5 e5       	ldi	r26, 0x55	; 85
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e5 e5       	ldi	r30, 0x55	; 85
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 60       	ori	r24, 0x08	; 8
 2a4:	8c 93       	st	X, r24
 2a6:	3e c0       	rjmp	.+124    	; 0x324 <INT_init+0x2a8>
				break;
			case RISING:
				SET_BIT(MCUCR,ISC10);
 2a8:	a5 e5       	ldi	r26, 0x55	; 85
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	e5 e5       	ldi	r30, 0x55	; 85
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	84 60       	ori	r24, 0x04	; 4
 2b4:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
 2b6:	a5 e5       	ldi	r26, 0x55	; 85
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	e5 e5       	ldi	r30, 0x55	; 85
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	88 60       	ori	r24, 0x08	; 8
 2c2:	8c 93       	st	X, r24
 2c4:	2f c0       	rjmp	.+94     	; 0x324 <INT_init+0x2a8>
			}
		}
		break;
		case EN_INT2:
		{
			CLEAR_BIT(DDRB,INT2_pin);	// Configure INT2/PB2/pin3 as input pin
 2c6:	a7 e3       	ldi	r26, 0x37	; 55
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e7 e3       	ldi	r30, 0x37	; 55
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	87 7f       	andi	r24, 0xF7	; 247
 2d2:	8c 93       	st	X, r24
			SET_BIT(GICR,INT2);			// Enable external interrupt pin INT2
 2d4:	ab e5       	ldi	r26, 0x5B	; 91
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	eb e5       	ldi	r30, 0x5B	; 91
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 62       	ori	r24, 0x20	; 32
 2e0:	8c 93       	st	X, r24
			switch (Int_config->trigger)
 2e2:	e9 81       	ldd	r30, Y+1	; 0x01
 2e4:	fa 81       	ldd	r31, Y+2	; 0x02
 2e6:	81 81       	ldd	r24, Z+1	; 0x01
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	3d 83       	std	Y+5, r19	; 0x05
 2ee:	2c 83       	std	Y+4, r18	; 0x04
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	9d 81       	ldd	r25, Y+5	; 0x05
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	91 05       	cpc	r25, r1
 2f8:	31 f0       	breq	.+12     	; 0x306 <INT_init+0x28a>
 2fa:	2c 81       	ldd	r18, Y+4	; 0x04
 2fc:	3d 81       	ldd	r19, Y+5	; 0x05
 2fe:	23 30       	cpi	r18, 0x03	; 3
 300:	31 05       	cpc	r19, r1
 302:	49 f0       	breq	.+18     	; 0x316 <INT_init+0x29a>
 304:	0f c0       	rjmp	.+30     	; 0x324 <INT_init+0x2a8>
			{
			case FALLING:
				CLEAR_BIT(MCUCSR,ISC2);
 306:	a4 e5       	ldi	r26, 0x54	; 84
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e4 e5       	ldi	r30, 0x54	; 84
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	8f 7b       	andi	r24, 0xBF	; 191
 312:	8c 93       	st	X, r24
 314:	07 c0       	rjmp	.+14     	; 0x324 <INT_init+0x2a8>
				break;
			case RISING:
				SET_BIT(MCUCSR,ISC2);
 316:	a4 e5       	ldi	r26, 0x54	; 84
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e4 e5       	ldi	r30, 0x54	; 84
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	80 64       	ori	r24, 0x40	; 64
 322:	8c 93       	st	X, r24
				break;
			}
		}
		break;
		}
		SREG  |= (1<<7);                // Enable interrupts by setting I-bit
 324:	af e5       	ldi	r26, 0x5F	; 95
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	ef e5       	ldi	r30, 0x5F	; 95
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	8c 93       	st	X, r24
		return INT_SUCCESS;
 332:	31 e0       	ldi	r19, 0x01	; 1
 334:	3b 83       	std	Y+3, r19	; 0x03
 336:	01 c0       	rjmp	.+2      	; 0x33a <INT_init+0x2be>
	}
	else
		return INT_FAILED;
 338:	1b 82       	std	Y+3, r1	; 0x03
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 33c:	2b 96       	adiw	r28, 0x0b	; 11
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	cf 91       	pop	r28
 34a:	df 91       	pop	r29
 34c:	08 95       	ret

0000034e <INT0_setCallBack>:


void INT0_setCallBack(void(*a_ptr)(void))
{
 34e:	df 93       	push	r29
 350:	cf 93       	push	r28
 352:	00 d0       	rcall	.+0      	; 0x354 <INT0_setCallBack+0x6>
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	9a 83       	std	Y+2, r25	; 0x02
 35a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_0=a_ptr;
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	90 93 61 00 	sts	0x0061, r25
 364:	80 93 60 00 	sts	0x0060, r24
}
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	cf 91       	pop	r28
 36e:	df 91       	pop	r29
 370:	08 95       	ret

00000372 <INT1_setCallBack>:

void INT1_setCallBack(void(*a_ptr)(void))
{
 372:	df 93       	push	r29
 374:	cf 93       	push	r28
 376:	00 d0       	rcall	.+0      	; 0x378 <INT1_setCallBack+0x6>
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	9a 83       	std	Y+2, r25	; 0x02
 37e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_1=a_ptr;
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	90 93 63 00 	sts	0x0063, r25
 388:	80 93 62 00 	sts	0x0062, r24
}
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	08 95       	ret

00000396 <INT2_setCallBack>:

void INT2_setCallBack(void(*a_ptr)(void))
{
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	00 d0       	rcall	.+0      	; 0x39c <INT2_setCallBack+0x6>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_2=a_ptr;
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	9a 81       	ldd	r25, Y+2	; 0x02
 3a8:	90 93 65 00 	sts	0x0065, r25
 3ac:	80 93 64 00 	sts	0x0064, r24
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	cf 91       	pop	r28
 3b6:	df 91       	pop	r29
 3b8:	08 95       	ret

000003ba <INT_Deinit>:

void INT_Deinit(ST_INT_Config* Int_config)
{
 3ba:	df 93       	push	r29
 3bc:	cf 93       	push	r28
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <INT_Deinit+0x6>
 3c0:	00 d0       	rcall	.+0      	; 0x3c2 <INT_Deinit+0x8>
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	9a 83       	std	Y+2, r25	; 0x02
 3c8:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(SREG,PIN7);				// Disable interrupts by clearing I-bit
 3ca:	af e5       	ldi	r26, 0x5F	; 95
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	ef e5       	ldi	r30, 0x5F	; 95
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	8f 77       	andi	r24, 0x7F	; 127
 3d6:	8c 93       	st	X, r24
	switch (Int_config->source)
 3d8:	e9 81       	ldd	r30, Y+1	; 0x01
 3da:	fa 81       	ldd	r31, Y+2	; 0x02
 3dc:	80 81       	ld	r24, Z
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	3c 83       	std	Y+4, r19	; 0x04
 3e4:	2b 83       	std	Y+3, r18	; 0x03
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	91 05       	cpc	r25, r1
 3ee:	89 f0       	breq	.+34     	; 0x412 <INT_Deinit+0x58>
 3f0:	2b 81       	ldd	r18, Y+3	; 0x03
 3f2:	3c 81       	ldd	r19, Y+4	; 0x04
 3f4:	22 30       	cpi	r18, 0x02	; 2
 3f6:	31 05       	cpc	r19, r1
 3f8:	a1 f0       	breq	.+40     	; 0x422 <INT_Deinit+0x68>
 3fa:	8b 81       	ldd	r24, Y+3	; 0x03
 3fc:	9c 81       	ldd	r25, Y+4	; 0x04
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	b9 f4       	brne	.+46     	; 0x430 <INT_Deinit+0x76>
	{
	case EN_INT0:
		CLEAR_BIT(GICR,INT0);			// Disable external interrupt pin INT0
 402:	ab e5       	ldi	r26, 0x5B	; 91
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	eb e5       	ldi	r30, 0x5B	; 91
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	8f 7b       	andi	r24, 0xBF	; 191
 40e:	8c 93       	st	X, r24
 410:	0f c0       	rjmp	.+30     	; 0x430 <INT_Deinit+0x76>
		break;
	case EN_INT1:
		CLEAR_BIT(GICR,INT1);			// Disable external interrupt pin INT1
 412:	ab e5       	ldi	r26, 0x5B	; 91
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	eb e5       	ldi	r30, 0x5B	; 91
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	8f 77       	andi	r24, 0x7F	; 127
 41e:	8c 93       	st	X, r24
 420:	07 c0       	rjmp	.+14     	; 0x430 <INT_Deinit+0x76>
		break;
	case EN_INT2:
		CLEAR_BIT(GICR,INT2);			// Disable external interrupt pin INT2
 422:	ab e5       	ldi	r26, 0x5B	; 91
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	eb e5       	ldi	r30, 0x5B	; 91
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	8f 7d       	andi	r24, 0xDF	; 223
 42e:	8c 93       	st	X, r24
		break;
	}
	SET_BIT(SREG,PIN7);       			// Enable interrupts by setting I-bit
 430:	af e5       	ldi	r26, 0x5F	; 95
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ef e5       	ldi	r30, 0x5F	; 95
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	80 68       	ori	r24, 0x80	; 128
 43c:	8c 93       	st	X, r24
}
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	cf 91       	pop	r28
 448:	df 91       	pop	r29
 44a:	08 95       	ret

0000044c <__vector_1>:

ISR(INT0_vect)
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_0 != NULL_PTR)
 476:	80 91 60 00 	lds	r24, 0x0060
 47a:	90 91 61 00 	lds	r25, 0x0061
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	29 f0       	breq	.+10     	; 0x48c <__stack+0x2d>
		{
			g_callBackPtr_0();
 482:	e0 91 60 00 	lds	r30, 0x0060
 486:	f0 91 61 00 	lds	r31, 0x0061
 48a:	09 95       	icall
		}
}
 48c:	cf 91       	pop	r28
 48e:	df 91       	pop	r29
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <__vector_2>:


ISR(INT1_vect)
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
 4d4:	df 93       	push	r29
 4d6:	cf 93       	push	r28
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_1 != NULL_PTR)
 4dc:	80 91 62 00 	lds	r24, 0x0062
 4e0:	90 91 63 00 	lds	r25, 0x0063
 4e4:	00 97       	sbiw	r24, 0x00	; 0
 4e6:	29 f0       	breq	.+10     	; 0x4f2 <__vector_2+0x40>
		{
			g_callBackPtr_1();
 4e8:	e0 91 62 00 	lds	r30, 0x0062
 4ec:	f0 91 63 00 	lds	r31, 0x0063
 4f0:	09 95       	icall
		}
}
 4f2:	cf 91       	pop	r28
 4f4:	df 91       	pop	r29
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_18>:

ISR(INT2_vect)
{
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
 53a:	df 93       	push	r29
 53c:	cf 93       	push	r28
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_2 != NULL_PTR)
 542:	80 91 64 00 	lds	r24, 0x0064
 546:	90 91 65 00 	lds	r25, 0x0065
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	29 f0       	breq	.+10     	; 0x558 <__vector_18+0x40>
		{
			g_callBackPtr_2();
 54e:	e0 91 64 00 	lds	r30, 0x0064
 552:	f0 91 65 00 	lds	r31, 0x0065
 556:	09 95       	icall
		}
}
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <pinMode>:
 * function parameters
 * pin_no:pin number to set
 * pin_direction:direction of the pin
 */
EN_STATE pinMode(uint8 pin_no,EN_PIN_DIRECTION pin_direction)
{
 57e:	df 93       	push	r29
 580:	cf 93       	push	r28
 582:	00 d0       	rcall	.+0      	; 0x584 <pinMode+0x6>
 584:	00 d0       	rcall	.+0      	; 0x586 <pinMode+0x8>
 586:	0f 92       	push	r0
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	8b 83       	std	Y+3, r24	; 0x03
 58e:	6c 83       	std	Y+4, r22	; 0x04
	REG_NAME port = NULL_PTR;
 590:	1a 82       	std	Y+2, r1	; 0x02
 592:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no < 0 || pin_no >= (4*MAX_PIN))
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	80 32       	cpi	r24, 0x20	; 32
 598:	10 f0       	brcs	.+4      	; 0x59e <pinMode+0x20>
		return FAILED;
 59a:	1d 82       	std	Y+5, r1	; 0x05
 59c:	3f c0       	rjmp	.+126    	; 0x61c <pinMode+0x9e>

	check_pin(&pin_no, &port);
 59e:	ce 01       	movw	r24, r28
 5a0:	03 96       	adiw	r24, 0x03	; 3
 5a2:	9e 01       	movw	r18, r28
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	b9 01       	movw	r22, r18
 5aa:	0e 94 70 04 	call	0x8e0	; 0x8e0 <check_pin>
	if(pin_direction==PIN_INPUT)
 5ae:	8c 81       	ldd	r24, Y+4	; 0x04
 5b0:	88 23       	and	r24, r24
 5b2:	b9 f4       	brne	.+46     	; 0x5e2 <pinMode+0x64>
	{
		CLEAR_BIT(port->ddrx,pin_no);
 5b4:	a9 81       	ldd	r26, Y+1	; 0x01
 5b6:	ba 81       	ldd	r27, Y+2	; 0x02
 5b8:	e9 81       	ldd	r30, Y+1	; 0x01
 5ba:	fa 81       	ldd	r31, Y+2	; 0x02
 5bc:	81 81       	ldd	r24, Z+1	; 0x01
 5be:	48 2f       	mov	r20, r24
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 2e       	mov	r0, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <pinMode+0x54>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	0a 94       	dec	r0
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <pinMode+0x50>
 5d6:	80 95       	com	r24
 5d8:	84 23       	and	r24, r20
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	8c 93       	st	X, r24
 5de:	11 97       	sbiw	r26, 0x01	; 1
 5e0:	1b c0       	rjmp	.+54     	; 0x618 <pinMode+0x9a>
	}
	else if(pin_direction==PIN_OUTPUT)
 5e2:	8c 81       	ldd	r24, Y+4	; 0x04
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	b1 f4       	brne	.+44     	; 0x614 <pinMode+0x96>
	{
		SET_BIT(port->ddrx,pin_no);
 5e8:	a9 81       	ldd	r26, Y+1	; 0x01
 5ea:	ba 81       	ldd	r27, Y+2	; 0x02
 5ec:	e9 81       	ldd	r30, Y+1	; 0x01
 5ee:	fa 81       	ldd	r31, Y+2	; 0x02
 5f0:	81 81       	ldd	r24, Z+1	; 0x01
 5f2:	48 2f       	mov	r20, r24
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 2e       	mov	r0, r18
 600:	02 c0       	rjmp	.+4      	; 0x606 <pinMode+0x88>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	0a 94       	dec	r0
 608:	e2 f7       	brpl	.-8      	; 0x602 <pinMode+0x84>
 60a:	84 2b       	or	r24, r20
 60c:	11 96       	adiw	r26, 0x01	; 1
 60e:	8c 93       	st	X, r24
 610:	11 97       	sbiw	r26, 0x01	; 1
 612:	02 c0       	rjmp	.+4      	; 0x618 <pinMode+0x9a>
	}
	else
	{
		return FAILED;
 614:	1d 82       	std	Y+5, r1	; 0x05
 616:	02 c0       	rjmp	.+4      	; 0x61c <pinMode+0x9e>
	}
	return SUCCESS;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	8d 83       	std	Y+5, r24	; 0x05
 61c:	8d 81       	ldd	r24, Y+5	; 0x05
}
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	cf 91       	pop	r28
 62a:	df 91       	pop	r29
 62c:	08 95       	ret

0000062e <digitalWrite>:
 * function parameters
 * pin_no:pin number to write
 * pin_val:output value high / low
 */
EN_STATE digitalWrite(uint8 pin_no,EN_PIN_VALUE pin_val)
{
 62e:	df 93       	push	r29
 630:	cf 93       	push	r28
 632:	00 d0       	rcall	.+0      	; 0x634 <digitalWrite+0x6>
 634:	00 d0       	rcall	.+0      	; 0x636 <digitalWrite+0x8>
 636:	0f 92       	push	r0
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
 63c:	8b 83       	std	Y+3, r24	; 0x03
 63e:	6c 83       	std	Y+4, r22	; 0x04
	REG_NAME port = NULL_PTR;
 640:	1a 82       	std	Y+2, r1	; 0x02
 642:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no < 0 || pin_no >= (4*MAX_PIN))
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	80 32       	cpi	r24, 0x20	; 32
 648:	10 f0       	brcs	.+4      	; 0x64e <digitalWrite+0x20>
		return FAILED;
 64a:	1d 82       	std	Y+5, r1	; 0x05
 64c:	3f c0       	rjmp	.+126    	; 0x6cc <digitalWrite+0x9e>

	check_pin(&pin_no, &port);
 64e:	ce 01       	movw	r24, r28
 650:	03 96       	adiw	r24, 0x03	; 3
 652:	9e 01       	movw	r18, r28
 654:	2f 5f       	subi	r18, 0xFF	; 255
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	b9 01       	movw	r22, r18
 65a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <check_pin>
	if(pin_val==Low)
 65e:	8c 81       	ldd	r24, Y+4	; 0x04
 660:	88 23       	and	r24, r24
 662:	b9 f4       	brne	.+46     	; 0x692 <digitalWrite+0x64>
	{
		CLEAR_BIT(port->portx,pin_no);
 664:	a9 81       	ldd	r26, Y+1	; 0x01
 666:	ba 81       	ldd	r27, Y+2	; 0x02
 668:	e9 81       	ldd	r30, Y+1	; 0x01
 66a:	fa 81       	ldd	r31, Y+2	; 0x02
 66c:	82 81       	ldd	r24, Z+2	; 0x02
 66e:	48 2f       	mov	r20, r24
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 2e       	mov	r0, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <digitalWrite+0x54>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	0a 94       	dec	r0
 684:	e2 f7       	brpl	.-8      	; 0x67e <digitalWrite+0x50>
 686:	80 95       	com	r24
 688:	84 23       	and	r24, r20
 68a:	12 96       	adiw	r26, 0x02	; 2
 68c:	8c 93       	st	X, r24
 68e:	12 97       	sbiw	r26, 0x02	; 2
 690:	1b c0       	rjmp	.+54     	; 0x6c8 <digitalWrite+0x9a>
	}
	else if(pin_val==High)
 692:	8c 81       	ldd	r24, Y+4	; 0x04
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	b1 f4       	brne	.+44     	; 0x6c4 <digitalWrite+0x96>
	{
		SET_BIT(port->portx,pin_no);
 698:	a9 81       	ldd	r26, Y+1	; 0x01
 69a:	ba 81       	ldd	r27, Y+2	; 0x02
 69c:	e9 81       	ldd	r30, Y+1	; 0x01
 69e:	fa 81       	ldd	r31, Y+2	; 0x02
 6a0:	82 81       	ldd	r24, Z+2	; 0x02
 6a2:	48 2f       	mov	r20, r24
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	28 2f       	mov	r18, r24
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 2e       	mov	r0, r18
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <digitalWrite+0x88>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	0a 94       	dec	r0
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <digitalWrite+0x84>
 6ba:	84 2b       	or	r24, r20
 6bc:	12 96       	adiw	r26, 0x02	; 2
 6be:	8c 93       	st	X, r24
 6c0:	12 97       	sbiw	r26, 0x02	; 2
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <digitalWrite+0x9a>
	}
	else
	{
		return FAILED;
 6c4:	1d 82       	std	Y+5, r1	; 0x05
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <digitalWrite+0x9e>
	}
	return SUCCESS;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	8d 83       	std	Y+5, r24	; 0x05
 6cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	cf 91       	pop	r28
 6da:	df 91       	pop	r29
 6dc:	08 95       	ret

000006de <digitalRead>:
 * function parameters
 * pin_no:pin number to read
 * pin_val:address to variable of the return reading
 */
EN_STATE digitalRead(uint8 pin_no,uint8 *pin_val)
{
 6de:	df 93       	push	r29
 6e0:	cf 93       	push	r28
 6e2:	00 d0       	rcall	.+0      	; 0x6e4 <digitalRead+0x6>
 6e4:	00 d0       	rcall	.+0      	; 0x6e6 <digitalRead+0x8>
 6e6:	00 d0       	rcall	.+0      	; 0x6e8 <digitalRead+0xa>
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
 6ec:	8b 83       	std	Y+3, r24	; 0x03
 6ee:	7d 83       	std	Y+5, r23	; 0x05
 6f0:	6c 83       	std	Y+4, r22	; 0x04
	REG_NAME port = NULL_PTR;
 6f2:	1a 82       	std	Y+2, r1	; 0x02
 6f4:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no < 0 || pin_no >= (4*MAX_PIN))
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	80 32       	cpi	r24, 0x20	; 32
 6fa:	10 f0       	brcs	.+4      	; 0x700 <digitalRead+0x22>
		return FAILED;
 6fc:	1e 82       	std	Y+6, r1	; 0x06
 6fe:	25 c0       	rjmp	.+74     	; 0x74a <digitalRead+0x6c>

	check_pin(&pin_no, &port);
 700:	ce 01       	movw	r24, r28
 702:	03 96       	adiw	r24, 0x03	; 3
 704:	9e 01       	movw	r18, r28
 706:	2f 5f       	subi	r18, 0xFF	; 255
 708:	3f 4f       	sbci	r19, 0xFF	; 255
 70a:	b9 01       	movw	r22, r18
 70c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <check_pin>
	if(BIT_IS_SET(port->pinx,pin_no))
 710:	e9 81       	ldd	r30, Y+1	; 0x01
 712:	fa 81       	ldd	r31, Y+2	; 0x02
 714:	80 81       	ld	r24, Z
 716:	28 2f       	mov	r18, r24
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	8b 81       	ldd	r24, Y+3	; 0x03
 71c:	88 2f       	mov	r24, r24
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	a9 01       	movw	r20, r18
 722:	02 c0       	rjmp	.+4      	; 0x728 <digitalRead+0x4a>
 724:	55 95       	asr	r21
 726:	47 95       	ror	r20
 728:	8a 95       	dec	r24
 72a:	e2 f7       	brpl	.-8      	; 0x724 <digitalRead+0x46>
 72c:	ca 01       	movw	r24, r20
 72e:	81 70       	andi	r24, 0x01	; 1
 730:	90 70       	andi	r25, 0x00	; 0
 732:	88 23       	and	r24, r24
 734:	29 f0       	breq	.+10     	; 0x740 <digitalRead+0x62>
		*pin_val = High;
 736:	ec 81       	ldd	r30, Y+4	; 0x04
 738:	fd 81       	ldd	r31, Y+5	; 0x05
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	80 83       	st	Z, r24
 73e:	03 c0       	rjmp	.+6      	; 0x746 <digitalRead+0x68>
	else
		*pin_val = Low;
 740:	ec 81       	ldd	r30, Y+4	; 0x04
 742:	fd 81       	ldd	r31, Y+5	; 0x05
 744:	10 82       	st	Z, r1

	return SUCCESS;
 746:	51 e0       	ldi	r21, 0x01	; 1
 748:	5e 83       	std	Y+6, r21	; 0x06
 74a:	8e 81       	ldd	r24, Y+6	; 0x06
}
 74c:	26 96       	adiw	r28, 0x06	; 6
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	cf 91       	pop	r28
 75a:	df 91       	pop	r29
 75c:	08 95       	ret

0000075e <portMode>:
 * function parameters
 * port:port name (PORTA-PORTB-PORTC-PORTD)
 * port_direction:direction of the port
 */
EN_STATE portMode(REG_NAME port,EN_PORT_DIRECTION port_direction)
{
 75e:	df 93       	push	r29
 760:	cf 93       	push	r28
 762:	00 d0       	rcall	.+0      	; 0x764 <portMode+0x6>
 764:	00 d0       	rcall	.+0      	; 0x766 <portMode+0x8>
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	9a 83       	std	Y+2, r25	; 0x02
 76c:	89 83       	std	Y+1, r24	; 0x01
 76e:	6b 83       	std	Y+3, r22	; 0x03
	if(port == PORTA || port == PORTB || port == PORTC || port == PORTD)
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	9a 81       	ldd	r25, Y+2	; 0x02
 774:	89 33       	cpi	r24, 0x39	; 57
 776:	91 05       	cpc	r25, r1
 778:	79 f0       	breq	.+30     	; 0x798 <portMode+0x3a>
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	9a 81       	ldd	r25, Y+2	; 0x02
 77e:	86 33       	cpi	r24, 0x36	; 54
 780:	91 05       	cpc	r25, r1
 782:	51 f0       	breq	.+20     	; 0x798 <portMode+0x3a>
 784:	89 81       	ldd	r24, Y+1	; 0x01
 786:	9a 81       	ldd	r25, Y+2	; 0x02
 788:	83 33       	cpi	r24, 0x33	; 51
 78a:	91 05       	cpc	r25, r1
 78c:	29 f0       	breq	.+10     	; 0x798 <portMode+0x3a>
 78e:	89 81       	ldd	r24, Y+1	; 0x01
 790:	9a 81       	ldd	r25, Y+2	; 0x02
 792:	80 33       	cpi	r24, 0x30	; 48
 794:	91 05       	cpc	r25, r1
 796:	39 f4       	brne	.+14     	; 0x7a6 <portMode+0x48>
	{
		port->ddrx=port_direction;
 798:	e9 81       	ldd	r30, Y+1	; 0x01
 79a:	fa 81       	ldd	r31, Y+2	; 0x02
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	81 83       	std	Z+1, r24	; 0x01
		return SUCCESS;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	8c 83       	std	Y+4, r24	; 0x04
 7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <portMode+0x4a>
	}
	return FAILED;
 7a6:	1c 82       	std	Y+4, r1	; 0x04
 7a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	cf 91       	pop	r28
 7b4:	df 91       	pop	r29
 7b6:	08 95       	ret

000007b8 <digitalWrite_Port>:
 * function parameters
 * port:port name (PORTA-PORTB-PORTC-PORTD)
 * port_val:output value HIGH / LOW
 */
EN_STATE digitalWrite_Port(REG_NAME port,EN_PORT_VALUE port_val)
{
 7b8:	df 93       	push	r29
 7ba:	cf 93       	push	r28
 7bc:	00 d0       	rcall	.+0      	; 0x7be <digitalWrite_Port+0x6>
 7be:	00 d0       	rcall	.+0      	; 0x7c0 <digitalWrite_Port+0x8>
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	9a 83       	std	Y+2, r25	; 0x02
 7c6:	89 83       	std	Y+1, r24	; 0x01
 7c8:	6b 83       	std	Y+3, r22	; 0x03
	if(port == PORTA || port == PORTB || port == PORTC || port == PORTD)
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
 7cc:	9a 81       	ldd	r25, Y+2	; 0x02
 7ce:	89 33       	cpi	r24, 0x39	; 57
 7d0:	91 05       	cpc	r25, r1
 7d2:	79 f0       	breq	.+30     	; 0x7f2 <digitalWrite_Port+0x3a>
 7d4:	89 81       	ldd	r24, Y+1	; 0x01
 7d6:	9a 81       	ldd	r25, Y+2	; 0x02
 7d8:	86 33       	cpi	r24, 0x36	; 54
 7da:	91 05       	cpc	r25, r1
 7dc:	51 f0       	breq	.+20     	; 0x7f2 <digitalWrite_Port+0x3a>
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	9a 81       	ldd	r25, Y+2	; 0x02
 7e2:	83 33       	cpi	r24, 0x33	; 51
 7e4:	91 05       	cpc	r25, r1
 7e6:	29 f0       	breq	.+10     	; 0x7f2 <digitalWrite_Port+0x3a>
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	9a 81       	ldd	r25, Y+2	; 0x02
 7ec:	80 33       	cpi	r24, 0x30	; 48
 7ee:	91 05       	cpc	r25, r1
 7f0:	39 f4       	brne	.+14     	; 0x800 <digitalWrite_Port+0x48>
	{
		port->portx=port_val;
 7f2:	e9 81       	ldd	r30, Y+1	; 0x01
 7f4:	fa 81       	ldd	r31, Y+2	; 0x02
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	82 83       	std	Z+2, r24	; 0x02
		return SUCCESS;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	8c 83       	std	Y+4, r24	; 0x04
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <digitalWrite_Port+0x4a>
	}
	return FAILED;
 800:	1c 82       	std	Y+4, r1	; 0x04
 802:	8c 81       	ldd	r24, Y+4	; 0x04
}
 804:	0f 90       	pop	r0
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	0f 90       	pop	r0
 80c:	cf 91       	pop	r28
 80e:	df 91       	pop	r29
 810:	08 95       	ret

00000812 <digitalRead_Port>:
 * function parameters
 * port:port name (PORTA-PORTB-PORTC-PORTD)
 * port_val:address to variable of the return reading
 */
EN_STATE digitalRead_Port(REG_NAME port,uint8 *port_val)
{
 812:	df 93       	push	r29
 814:	cf 93       	push	r28
 816:	00 d0       	rcall	.+0      	; 0x818 <digitalRead_Port+0x6>
 818:	00 d0       	rcall	.+0      	; 0x81a <digitalRead_Port+0x8>
 81a:	0f 92       	push	r0
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	9a 83       	std	Y+2, r25	; 0x02
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	7c 83       	std	Y+4, r23	; 0x04
 826:	6b 83       	std	Y+3, r22	; 0x03
	if(port == PORTA || port == PORTB || port == PORTC || port == PORTD)
 828:	89 81       	ldd	r24, Y+1	; 0x01
 82a:	9a 81       	ldd	r25, Y+2	; 0x02
 82c:	89 33       	cpi	r24, 0x39	; 57
 82e:	91 05       	cpc	r25, r1
 830:	79 f0       	breq	.+30     	; 0x850 <digitalRead_Port+0x3e>
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	9a 81       	ldd	r25, Y+2	; 0x02
 836:	86 33       	cpi	r24, 0x36	; 54
 838:	91 05       	cpc	r25, r1
 83a:	51 f0       	breq	.+20     	; 0x850 <digitalRead_Port+0x3e>
 83c:	89 81       	ldd	r24, Y+1	; 0x01
 83e:	9a 81       	ldd	r25, Y+2	; 0x02
 840:	83 33       	cpi	r24, 0x33	; 51
 842:	91 05       	cpc	r25, r1
 844:	29 f0       	breq	.+10     	; 0x850 <digitalRead_Port+0x3e>
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	9a 81       	ldd	r25, Y+2	; 0x02
 84a:	80 33       	cpi	r24, 0x30	; 48
 84c:	91 05       	cpc	r25, r1
 84e:	49 f4       	brne	.+18     	; 0x862 <digitalRead_Port+0x50>
	{
		*port_val= port->pinx;
 850:	e9 81       	ldd	r30, Y+1	; 0x01
 852:	fa 81       	ldd	r31, Y+2	; 0x02
 854:	80 81       	ld	r24, Z
 856:	eb 81       	ldd	r30, Y+3	; 0x03
 858:	fc 81       	ldd	r31, Y+4	; 0x04
 85a:	80 83       	st	Z, r24
		return SUCCESS;
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	8d 83       	std	Y+5, r24	; 0x05
 860:	01 c0       	rjmp	.+2      	; 0x864 <digitalRead_Port+0x52>
	}
	return FAILED;
 862:	1d 82       	std	Y+5, r1	; 0x05
 864:	8d 81       	ldd	r24, Y+5	; 0x05
}
 866:	0f 90       	pop	r0
 868:	0f 90       	pop	r0
 86a:	0f 90       	pop	r0
 86c:	0f 90       	pop	r0
 86e:	0f 90       	pop	r0
 870:	cf 91       	pop	r28
 872:	df 91       	pop	r29
 874:	08 95       	ret

00000876 <Enable_PULLUP>:

/*
 * active internal pull up resistor for specific pin
 */
EN_STATE Enable_PULLUP (uint8 pin_no)
{
 876:	df 93       	push	r29
 878:	cf 93       	push	r28
 87a:	00 d0       	rcall	.+0      	; 0x87c <Enable_PULLUP+0x6>
 87c:	00 d0       	rcall	.+0      	; 0x87e <Enable_PULLUP+0x8>
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	8b 83       	std	Y+3, r24	; 0x03
	REG_NAME port = NULL_PTR;
 884:	1a 82       	std	Y+2, r1	; 0x02
 886:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no < 0 || pin_no >= (4*MAX_PIN))
 888:	8b 81       	ldd	r24, Y+3	; 0x03
 88a:	80 32       	cpi	r24, 0x20	; 32
 88c:	10 f0       	brcs	.+4      	; 0x892 <Enable_PULLUP+0x1c>
		return FAILED;
 88e:	1c 82       	std	Y+4, r1	; 0x04
 890:	1f c0       	rjmp	.+62     	; 0x8d0 <Enable_PULLUP+0x5a>

	check_pin(&pin_no, &port);
 892:	ce 01       	movw	r24, r28
 894:	03 96       	adiw	r24, 0x03	; 3
 896:	9e 01       	movw	r18, r28
 898:	2f 5f       	subi	r18, 0xFF	; 255
 89a:	3f 4f       	sbci	r19, 0xFF	; 255
 89c:	b9 01       	movw	r22, r18
 89e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <check_pin>
	SET_BIT(port->portx,pin_no);
 8a2:	a9 81       	ldd	r26, Y+1	; 0x01
 8a4:	ba 81       	ldd	r27, Y+2	; 0x02
 8a6:	e9 81       	ldd	r30, Y+1	; 0x01
 8a8:	fa 81       	ldd	r31, Y+2	; 0x02
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	48 2f       	mov	r20, r24
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	28 2f       	mov	r18, r24
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 2e       	mov	r0, r18
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <Enable_PULLUP+0x4a>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	0a 94       	dec	r0
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <Enable_PULLUP+0x46>
 8c4:	84 2b       	or	r24, r20
 8c6:	12 96       	adiw	r26, 0x02	; 2
 8c8:	8c 93       	st	X, r24
 8ca:	12 97       	sbiw	r26, 0x02	; 2
	return SUCCESS;
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	8c 83       	std	Y+4, r24	; 0x04
 8d0:	8c 81       	ldd	r24, Y+4	; 0x04
}
 8d2:	0f 90       	pop	r0
 8d4:	0f 90       	pop	r0
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	cf 91       	pop	r28
 8dc:	df 91       	pop	r29
 8de:	08 95       	ret

000008e0 <check_pin>:

/*
 * used to identify port id for a given pin number
 */
void check_pin(uint8* pin_no,REG_NAME* port)
{
 8e0:	df 93       	push	r29
 8e2:	cf 93       	push	r28
 8e4:	00 d0       	rcall	.+0      	; 0x8e6 <check_pin+0x6>
 8e6:	00 d0       	rcall	.+0      	; 0x8e8 <check_pin+0x8>
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
 8ec:	9a 83       	std	Y+2, r25	; 0x02
 8ee:	89 83       	std	Y+1, r24	; 0x01
 8f0:	7c 83       	std	Y+4, r23	; 0x04
 8f2:	6b 83       	std	Y+3, r22	; 0x03
	if((*pin_no >=0) && (*pin_no <=7))
 8f4:	e9 81       	ldd	r30, Y+1	; 0x01
 8f6:	fa 81       	ldd	r31, Y+2	; 0x02
 8f8:	80 81       	ld	r24, Z
 8fa:	88 30       	cpi	r24, 0x08	; 8
 8fc:	38 f4       	brcc	.+14     	; 0x90c <check_pin+0x2c>
	{
		*port= PORTA;
 8fe:	eb 81       	ldd	r30, Y+3	; 0x03
 900:	fc 81       	ldd	r31, Y+4	; 0x04
 902:	89 e3       	ldi	r24, 0x39	; 57
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	91 83       	std	Z+1, r25	; 0x01
 908:	80 83       	st	Z, r24
 90a:	4b c0       	rjmp	.+150    	; 0x9a2 <check_pin+0xc2>
	}
	else if((*pin_no >=8) && (*pin_no<=15))
 90c:	e9 81       	ldd	r30, Y+1	; 0x01
 90e:	fa 81       	ldd	r31, Y+2	; 0x02
 910:	80 81       	ld	r24, Z
 912:	88 30       	cpi	r24, 0x08	; 8
 914:	98 f0       	brcs	.+38     	; 0x93c <check_pin+0x5c>
 916:	e9 81       	ldd	r30, Y+1	; 0x01
 918:	fa 81       	ldd	r31, Y+2	; 0x02
 91a:	80 81       	ld	r24, Z
 91c:	80 31       	cpi	r24, 0x10	; 16
 91e:	70 f4       	brcc	.+28     	; 0x93c <check_pin+0x5c>
	{
		*pin_no -= 8;
 920:	e9 81       	ldd	r30, Y+1	; 0x01
 922:	fa 81       	ldd	r31, Y+2	; 0x02
 924:	80 81       	ld	r24, Z
 926:	88 50       	subi	r24, 0x08	; 8
 928:	e9 81       	ldd	r30, Y+1	; 0x01
 92a:	fa 81       	ldd	r31, Y+2	; 0x02
 92c:	80 83       	st	Z, r24
		*port= PORTB;
 92e:	eb 81       	ldd	r30, Y+3	; 0x03
 930:	fc 81       	ldd	r31, Y+4	; 0x04
 932:	86 e3       	ldi	r24, 0x36	; 54
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	91 83       	std	Z+1, r25	; 0x01
 938:	80 83       	st	Z, r24
 93a:	33 c0       	rjmp	.+102    	; 0x9a2 <check_pin+0xc2>
	}
	else if((*pin_no >=16) && (*pin_no <=23))
 93c:	e9 81       	ldd	r30, Y+1	; 0x01
 93e:	fa 81       	ldd	r31, Y+2	; 0x02
 940:	80 81       	ld	r24, Z
 942:	80 31       	cpi	r24, 0x10	; 16
 944:	98 f0       	brcs	.+38     	; 0x96c <check_pin+0x8c>
 946:	e9 81       	ldd	r30, Y+1	; 0x01
 948:	fa 81       	ldd	r31, Y+2	; 0x02
 94a:	80 81       	ld	r24, Z
 94c:	88 31       	cpi	r24, 0x18	; 24
 94e:	70 f4       	brcc	.+28     	; 0x96c <check_pin+0x8c>
	{
		*pin_no -= 16;
 950:	e9 81       	ldd	r30, Y+1	; 0x01
 952:	fa 81       	ldd	r31, Y+2	; 0x02
 954:	80 81       	ld	r24, Z
 956:	80 51       	subi	r24, 0x10	; 16
 958:	e9 81       	ldd	r30, Y+1	; 0x01
 95a:	fa 81       	ldd	r31, Y+2	; 0x02
 95c:	80 83       	st	Z, r24
		*port= PORTC;
 95e:	eb 81       	ldd	r30, Y+3	; 0x03
 960:	fc 81       	ldd	r31, Y+4	; 0x04
 962:	83 e3       	ldi	r24, 0x33	; 51
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	91 83       	std	Z+1, r25	; 0x01
 968:	80 83       	st	Z, r24
 96a:	1b c0       	rjmp	.+54     	; 0x9a2 <check_pin+0xc2>
	}
	else if((*pin_no =24) && (*pin_no <=31))
 96c:	e9 81       	ldd	r30, Y+1	; 0x01
 96e:	fa 81       	ldd	r31, Y+2	; 0x02
 970:	88 e1       	ldi	r24, 0x18	; 24
 972:	80 83       	st	Z, r24
 974:	e9 81       	ldd	r30, Y+1	; 0x01
 976:	fa 81       	ldd	r31, Y+2	; 0x02
 978:	80 81       	ld	r24, Z
 97a:	80 32       	cpi	r24, 0x20	; 32
 97c:	70 f4       	brcc	.+28     	; 0x99a <check_pin+0xba>
	{
		*pin_no -= 24;
 97e:	e9 81       	ldd	r30, Y+1	; 0x01
 980:	fa 81       	ldd	r31, Y+2	; 0x02
 982:	80 81       	ld	r24, Z
 984:	88 51       	subi	r24, 0x18	; 24
 986:	e9 81       	ldd	r30, Y+1	; 0x01
 988:	fa 81       	ldd	r31, Y+2	; 0x02
 98a:	80 83       	st	Z, r24
		*port= PORTD;
 98c:	eb 81       	ldd	r30, Y+3	; 0x03
 98e:	fc 81       	ldd	r31, Y+4	; 0x04
 990:	80 e3       	ldi	r24, 0x30	; 48
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	91 83       	std	Z+1, r25	; 0x01
 996:	80 83       	st	Z, r24
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <check_pin+0xc2>
	}
	else
	{
		*port= NULL_PTR;
 99a:	eb 81       	ldd	r30, Y+3	; 0x03
 99c:	fc 81       	ldd	r31, Y+4	; 0x04
 99e:	11 82       	std	Z+1, r1	; 0x01
 9a0:	10 82       	st	Z, r1
	}
}
 9a2:	0f 90       	pop	r0
 9a4:	0f 90       	pop	r0
 9a6:	0f 90       	pop	r0
 9a8:	0f 90       	pop	r0
 9aa:	cf 91       	pop	r28
 9ac:	df 91       	pop	r29
 9ae:	08 95       	ret

000009b0 <LED_init>:
#include "LED.h"

/*============= FUNCTION DEFINITION =============*/

EN_STATE LED_init(uint8 pin)
{
 9b0:	df 93       	push	r29
 9b2:	cf 93       	push	r28
 9b4:	00 d0       	rcall	.+0      	; 0x9b6 <LED_init+0x6>
 9b6:	00 d0       	rcall	.+0      	; 0x9b8 <LED_init+0x8>
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
 9bc:	8b 83       	std	Y+3, r24	; 0x03
	EN_STATE state_1,state_2;
	state_1=pinMode(pin, PIN_OUTPUT);
 9be:	8b 81       	ldd	r24, Y+3	; 0x03
 9c0:	61 e0       	ldi	r22, 0x01	; 1
 9c2:	0e 94 bf 02 	call	0x57e	; 0x57e <pinMode>
 9c6:	8a 83       	std	Y+2, r24	; 0x02
#if (LED_logic ==1)
	state_2=digitalWrite(pin, Low);
 9c8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	0e 94 17 03 	call	0x62e	; 0x62e <digitalWrite>
 9d0:	89 83       	std	Y+1, r24	; 0x01
#elif (LED_logic ==2)
	state_2=digitalWrite(pin, High);
#endif
	if(state_1 == SUCCESS && state_2 == SUCCESS)
 9d2:	8a 81       	ldd	r24, Y+2	; 0x02
 9d4:	81 30       	cpi	r24, 0x01	; 1
 9d6:	31 f4       	brne	.+12     	; 0x9e4 <LED_init+0x34>
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	81 30       	cpi	r24, 0x01	; 1
 9dc:	19 f4       	brne	.+6      	; 0x9e4 <LED_init+0x34>
		return SUCCESS;
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	8c 83       	std	Y+4, r24	; 0x04
 9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <LED_init+0x36>
	return FAILED;
 9e4:	1c 82       	std	Y+4, r1	; 0x04
 9e6:	8c 81       	ldd	r24, Y+4	; 0x04
}
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
 9ee:	0f 90       	pop	r0
 9f0:	cf 91       	pop	r28
 9f2:	df 91       	pop	r29
 9f4:	08 95       	ret

000009f6 <LED_digitalwrite>:

EN_STATE LED_digitalwrite(uint8 pin,EN_PIN_VALUE value)
{
 9f6:	df 93       	push	r29
 9f8:	cf 93       	push	r28
 9fa:	00 d0       	rcall	.+0      	; 0x9fc <LED_digitalwrite+0x6>
 9fc:	0f 92       	push	r0
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
 a02:	8a 83       	std	Y+2, r24	; 0x02
 a04:	6b 83       	std	Y+3, r22	; 0x03
	EN_STATE state;
#if (LED_logic ==1)
	if(value==High)
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	31 f4       	brne	.+12     	; 0xa18 <LED_digitalwrite+0x22>
		state=digitalWrite(pin, High);
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	61 e0       	ldi	r22, 0x01	; 1
 a10:	0e 94 17 03 	call	0x62e	; 0x62e <digitalWrite>
 a14:	89 83       	std	Y+1, r24	; 0x01
 a16:	05 c0       	rjmp	.+10     	; 0xa22 <LED_digitalwrite+0x2c>
	else
		state=digitalWrite(pin, Low);
 a18:	8a 81       	ldd	r24, Y+2	; 0x02
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	0e 94 17 03 	call	0x62e	; 0x62e <digitalWrite>
 a20:	89 83       	std	Y+1, r24	; 0x01
	if(value==High)
		state=digitalWrite(pin, Low);
	else
		state=digitalWrite(pin, High);
#endif
		return state;
 a22:	89 81       	ldd	r24, Y+1	; 0x01
}
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	0f 90       	pop	r0
 a2a:	cf 91       	pop	r28
 a2c:	df 91       	pop	r29
 a2e:	08 95       	ret

00000a30 <Button_init>:
#include "BUTTON.h"

/*============= FUNCTION DEFINITION =============*/

EN_STATE Button_init(uint8 pin,EN_internal_pullup state)
{
 a30:	df 93       	push	r29
 a32:	cf 93       	push	r28
 a34:	00 d0       	rcall	.+0      	; 0xa36 <Button_init+0x6>
 a36:	00 d0       	rcall	.+0      	; 0xa38 <Button_init+0x8>
 a38:	0f 92       	push	r0
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	8b 83       	std	Y+3, r24	; 0x03
 a40:	6c 83       	std	Y+4, r22	; 0x04
	EN_STATE state_1,state_2;
	state_1=pinMode(pin, PIN_INPUT);
 a42:	8b 81       	ldd	r24, Y+3	; 0x03
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	0e 94 bf 02 	call	0x57e	; 0x57e <pinMode>
 a4a:	8a 83       	std	Y+2, r24	; 0x02
	if(state_1==SUCCESS)
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	b9 f4       	brne	.+46     	; 0xa80 <Button_init+0x50>
	{
		if(state==enable)
 a52:	8c 81       	ldd	r24, Y+4	; 0x04
 a54:	81 30       	cpi	r24, 0x01	; 1
 a56:	31 f4       	brne	.+12     	; 0xa64 <Button_init+0x34>
			state_2=digitalWrite(pin, High);
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	61 e0       	ldi	r22, 0x01	; 1
 a5c:	0e 94 17 03 	call	0x62e	; 0x62e <digitalWrite>
 a60:	89 83       	std	Y+1, r24	; 0x01
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <Button_init+0x3e>
		else
			state_2=digitalWrite(pin, Low);
 a64:	8b 81       	ldd	r24, Y+3	; 0x03
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	0e 94 17 03 	call	0x62e	; 0x62e <digitalWrite>
 a6c:	89 83       	std	Y+1, r24	; 0x01
		if(state_1 == SUCCESS && state_2 == SUCCESS)
 a6e:	8a 81       	ldd	r24, Y+2	; 0x02
 a70:	81 30       	cpi	r24, 0x01	; 1
 a72:	31 f4       	brne	.+12     	; 0xa80 <Button_init+0x50>
 a74:	89 81       	ldd	r24, Y+1	; 0x01
 a76:	81 30       	cpi	r24, 0x01	; 1
 a78:	19 f4       	brne	.+6      	; 0xa80 <Button_init+0x50>
			return SUCCESS;
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	8d 83       	std	Y+5, r24	; 0x05
 a7e:	01 c0       	rjmp	.+2      	; 0xa82 <Button_init+0x52>
	}
	return FAILED;
 a80:	1d 82       	std	Y+5, r1	; 0x05
 a82:	8d 81       	ldd	r24, Y+5	; 0x05
}
 a84:	0f 90       	pop	r0
 a86:	0f 90       	pop	r0
 a88:	0f 90       	pop	r0
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	cf 91       	pop	r28
 a90:	df 91       	pop	r29
 a92:	08 95       	ret

00000a94 <Button_Read>:


uint8 Button_Read(uint8 pin)
{
 a94:	df 93       	push	r29
 a96:	cf 93       	push	r28
 a98:	00 d0       	rcall	.+0      	; 0xa9a <Button_Read+0x6>
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
 a9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 pin_val;
	digitalRead(pin,&pin_val);
 aa0:	8a 81       	ldd	r24, Y+2	; 0x02
 aa2:	9e 01       	movw	r18, r28
 aa4:	2f 5f       	subi	r18, 0xFF	; 255
 aa6:	3f 4f       	sbci	r19, 0xFF	; 255
 aa8:	b9 01       	movw	r22, r18
 aaa:	0e 94 6f 03 	call	0x6de	; 0x6de <digitalRead>
	return pin_val;
 aae:	89 81       	ldd	r24, Y+1	; 0x01
}
 ab0:	0f 90       	pop	r0
 ab2:	0f 90       	pop	r0
 ab4:	cf 91       	pop	r28
 ab6:	df 91       	pop	r29
 ab8:	08 95       	ret

00000aba <main>:
uint8 g_flag=0;

void buttonCount(void);

int main()
{
 aba:	df 93       	push	r29
 abc:	cf 93       	push	r28
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
 ac2:	29 97       	sbiw	r28, 0x09	; 9
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	de bf       	out	0x3e, r29	; 62
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	cd bf       	out	0x3d, r28	; 61
	uint8 count=0;
 ace:	1d 82       	std	Y+5, r1	; 0x05
	uint8 LED1=1,LED2=2,LED3=3,LED4=4;
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	8c 83       	std	Y+4, r24	; 0x04
 ad4:	82 e0       	ldi	r24, 0x02	; 2
 ad6:	8b 83       	std	Y+3, r24	; 0x03
 ad8:	83 e0       	ldi	r24, 0x03	; 3
 ada:	8a 83       	std	Y+2, r24	; 0x02
 adc:	84 e0       	ldi	r24, 0x04	; 4
 ade:	89 83       	std	Y+1, r24	; 0x01
	ST_INT_Config int_0={EN_INT0,RISING};
 ae0:	1e 82       	std	Y+6, r1	; 0x06
 ae2:	83 e0       	ldi	r24, 0x03	; 3
 ae4:	8f 83       	std	Y+7, r24	; 0x07
	LED_init(LED1);
 ae6:	8c 81       	ldd	r24, Y+4	; 0x04
 ae8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LED_init>
	LED_init(LED2);
 aec:	8b 81       	ldd	r24, Y+3	; 0x03
 aee:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LED_init>
	LED_init(LED3);
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LED_init>
	LED_init(LED4);
 af8:	89 81       	ldd	r24, Y+1	; 0x01
 afa:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LED_init>
	INT_init(&int_0);
 afe:	ce 01       	movw	r24, r28
 b00:	06 96       	adiw	r24, 0x06	; 6
 b02:	0e 94 3e 00 	call	0x7c	; 0x7c <INT_init>
	INT0_setCallBack(buttonCount);
 b06:	88 ef       	ldi	r24, 0xF8	; 248
 b08:	95 e0       	ldi	r25, 0x05	; 5
 b0a:	0e 94 a7 01 	call	0x34e	; 0x34e <INT0_setCallBack>

	while(1)
	{
		if(g_flag==1)
 b0e:	80 91 66 00 	lds	r24, 0x0066
 b12:	81 30       	cpi	r24, 0x01	; 1
 b14:	e1 f7       	brne	.-8      	; 0xb0e <main+0x54>
		{
			count++;
 b16:	8d 81       	ldd	r24, Y+5	; 0x05
 b18:	8f 5f       	subi	r24, 0xFF	; 255
 b1a:	8d 83       	std	Y+5, r24	; 0x05
			if(count==9)
 b1c:	8d 81       	ldd	r24, Y+5	; 0x05
 b1e:	89 30       	cpi	r24, 0x09	; 9
 b20:	09 f4       	brne	.+2      	; 0xb24 <main+0x6a>
				count=0;
 b22:	1d 82       	std	Y+5, r1	; 0x05
			switch (count)
 b24:	8d 81       	ldd	r24, Y+5	; 0x05
 b26:	28 2f       	mov	r18, r24
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	39 87       	std	Y+9, r19	; 0x09
 b2c:	28 87       	std	Y+8, r18	; 0x08
 b2e:	88 85       	ldd	r24, Y+8	; 0x08
 b30:	99 85       	ldd	r25, Y+9	; 0x09
 b32:	84 30       	cpi	r24, 0x04	; 4
 b34:	91 05       	cpc	r25, r1
 b36:	a1 f1       	breq	.+104    	; 0xba0 <main+0xe6>
 b38:	28 85       	ldd	r18, Y+8	; 0x08
 b3a:	39 85       	ldd	r19, Y+9	; 0x09
 b3c:	25 30       	cpi	r18, 0x05	; 5
 b3e:	31 05       	cpc	r19, r1
 b40:	84 f4       	brge	.+32     	; 0xb62 <main+0xa8>
 b42:	88 85       	ldd	r24, Y+8	; 0x08
 b44:	99 85       	ldd	r25, Y+9	; 0x09
 b46:	82 30       	cpi	r24, 0x02	; 2
 b48:	91 05       	cpc	r25, r1
 b4a:	01 f1       	breq	.+64     	; 0xb8c <main+0xd2>
 b4c:	28 85       	ldd	r18, Y+8	; 0x08
 b4e:	39 85       	ldd	r19, Y+9	; 0x09
 b50:	23 30       	cpi	r18, 0x03	; 3
 b52:	31 05       	cpc	r19, r1
 b54:	04 f5       	brge	.+64     	; 0xb96 <main+0xdc>
 b56:	88 85       	ldd	r24, Y+8	; 0x08
 b58:	99 85       	ldd	r25, Y+9	; 0x09
 b5a:	81 30       	cpi	r24, 0x01	; 1
 b5c:	91 05       	cpc	r25, r1
 b5e:	89 f0       	breq	.+34     	; 0xb82 <main+0xc8>
 b60:	33 c0       	rjmp	.+102    	; 0xbc8 <main+0x10e>
 b62:	28 85       	ldd	r18, Y+8	; 0x08
 b64:	39 85       	ldd	r19, Y+9	; 0x09
 b66:	26 30       	cpi	r18, 0x06	; 6
 b68:	31 05       	cpc	r19, r1
 b6a:	21 f1       	breq	.+72     	; 0xbb4 <main+0xfa>
 b6c:	88 85       	ldd	r24, Y+8	; 0x08
 b6e:	99 85       	ldd	r25, Y+9	; 0x09
 b70:	86 30       	cpi	r24, 0x06	; 6
 b72:	91 05       	cpc	r25, r1
 b74:	d4 f0       	brlt	.+52     	; 0xbaa <main+0xf0>
 b76:	28 85       	ldd	r18, Y+8	; 0x08
 b78:	39 85       	ldd	r19, Y+9	; 0x09
 b7a:	27 30       	cpi	r18, 0x07	; 7
 b7c:	31 05       	cpc	r19, r1
 b7e:	f9 f0       	breq	.+62     	; 0xbbe <main+0x104>
 b80:	23 c0       	rjmp	.+70     	; 0xbc8 <main+0x10e>
			{
			case 1:
				LED_digitalwrite(LED1, High);
 b82:	8c 81       	ldd	r24, Y+4	; 0x04
 b84:	61 e0       	ldi	r22, 0x01	; 1
 b86:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
 b8a:	2f c0       	rjmp	.+94     	; 0xbea <main+0x130>
				break;
			case 2:
				LED_digitalwrite(LED2, High);
 b8c:	8b 81       	ldd	r24, Y+3	; 0x03
 b8e:	61 e0       	ldi	r22, 0x01	; 1
 b90:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
 b94:	2a c0       	rjmp	.+84     	; 0xbea <main+0x130>
				break;
			case 3:
				LED_digitalwrite(LED3, High);
 b96:	8a 81       	ldd	r24, Y+2	; 0x02
 b98:	61 e0       	ldi	r22, 0x01	; 1
 b9a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
 b9e:	25 c0       	rjmp	.+74     	; 0xbea <main+0x130>
				break;
			case 4:
				LED_digitalwrite(LED4, High);
 ba0:	89 81       	ldd	r24, Y+1	; 0x01
 ba2:	61 e0       	ldi	r22, 0x01	; 1
 ba4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
 ba8:	20 c0       	rjmp	.+64     	; 0xbea <main+0x130>
				break;
			case 5:
				LED_digitalwrite(LED1, Low);
 baa:	8c 81       	ldd	r24, Y+4	; 0x04
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
 bb2:	1b c0       	rjmp	.+54     	; 0xbea <main+0x130>
				break;
			case 6:
				LED_digitalwrite(LED2, Low);
 bb4:	8b 81       	ldd	r24, Y+3	; 0x03
 bb6:	60 e0       	ldi	r22, 0x00	; 0
 bb8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
 bbc:	16 c0       	rjmp	.+44     	; 0xbea <main+0x130>
				break;
			case 7:
				LED_digitalwrite(LED3, Low);
 bbe:	8a 81       	ldd	r24, Y+2	; 0x02
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
 bc6:	11 c0       	rjmp	.+34     	; 0xbea <main+0x130>
				break;
			default:
				LED_digitalwrite(LED1, Low);
 bc8:	8c 81       	ldd	r24, Y+4	; 0x04
 bca:	60 e0       	ldi	r22, 0x00	; 0
 bcc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
				LED_digitalwrite(LED2, Low);
 bd0:	8b 81       	ldd	r24, Y+3	; 0x03
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
				LED_digitalwrite(LED3, Low);
 bd8:	8a 81       	ldd	r24, Y+2	; 0x02
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
				LED_digitalwrite(LED4, Low);
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LED_digitalwrite>
				count=0;
 be8:	1d 82       	std	Y+5, r1	; 0x05
				break;
			}
			g_flag=0;
 bea:	10 92 66 00 	sts	0x0066, r1
 bee:	8f cf       	rjmp	.-226    	; 0xb0e <main+0x54>

00000bf0 <buttonCount>:
	}
}


void buttonCount(void)
{
 bf0:	df 93       	push	r29
 bf2:	cf 93       	push	r28
 bf4:	cd b7       	in	r28, 0x3d	; 61
 bf6:	de b7       	in	r29, 0x3e	; 62
	g_flag=1;
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	80 93 66 00 	sts	0x0066, r24
}
 bfe:	cf 91       	pop	r28
 c00:	df 91       	pop	r29
 c02:	08 95       	ret

00000c04 <_exit>:
 c04:	f8 94       	cli

00000c06 <__stop_program>:
 c06:	ff cf       	rjmp	.-2      	; 0xc06 <__stop_program>
